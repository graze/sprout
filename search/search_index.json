{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83c\udf31 Sprout \u00b6 Sprout is a tool to help you Populate your databases with seed data. It's core method is by using .sql files that can be committed and diffed by your code repository. It can: Seed sql data from local files Dump data from mysql tables Chop (truncate) data in mysql tables Performs actions in parallel Handle multiple groups of seed data (for example, static , core , testing ) Quick Start \u00b6 Getting Sprout \u00b6 You can get sprout in the following ways: composer to grab the application using PHP's composer docker to run sprout without installing it locally Configuration \u00b6 You will need a configuration file to tell sprout how to talk to your databases. Populate your seed data \u00b6 You can group your seed data depending on its purpose. For example: static , operational and development . Ensure your database is populated with your seed data and run the following command: sprout dump --config = /path/to/config.yml --group = group1 schema:table1,table2,... schema2:table3,... ... This will create a set of .sql files locally containing the data in your database. Seed your data \u00b6 You can now seed your data using the local files. sprout seed --config = /path/to/config.yml --group = group1 If you do not need to truncate your tables first, use the --no-chop option. sprout seed --config = /path/to/config.yml --no-chop --group = group1","title":"Getting Started"},{"location":"#sprout","text":"Sprout is a tool to help you Populate your databases with seed data. It's core method is by using .sql files that can be committed and diffed by your code repository. It can: Seed sql data from local files Dump data from mysql tables Chop (truncate) data in mysql tables Performs actions in parallel Handle multiple groups of seed data (for example, static , core , testing )","title":"\ud83c\udf31 Sprout"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#getting-sprout","text":"You can get sprout in the following ways: composer to grab the application using PHP's composer docker to run sprout without installing it locally","title":"Getting Sprout"},{"location":"#configuration","text":"You will need a configuration file to tell sprout how to talk to your databases.","title":"Configuration"},{"location":"#populate-your-seed-data","text":"You can group your seed data depending on its purpose. For example: static , operational and development . Ensure your database is populated with your seed data and run the following command: sprout dump --config = /path/to/config.yml --group = group1 schema:table1,table2,... schema2:table3,... ... This will create a set of .sql files locally containing the data in your database.","title":"Populate your seed data"},{"location":"#seed-your-data","text":"You can now seed your data using the local files. sprout seed --config = /path/to/config.yml --group = group1 If you do not need to truncate your tables first, use the --no-chop option. sprout seed --config = /path/to/config.yml --no-chop --group = group1","title":"Seed your data"},{"location":"excludes/","text":"Excludes \u00b6 The configuration option: schemas.<schema>.exclude allows you to specify a list of regular expressions to exclude from any chop, dump or seed command. Configuration \u00b6 These are defined in the configuration file . schemas : schema : excludes : - 'table' - 'regex*' - '/custom_regex/' You can specify a simple string, a regex, or a complex regex. Regular Expressions \u00b6 The regular expressions are surrounded by: /^<exclude>$/ , so it will match the complete table name if possible. If you do not want this to apply, place a / at the beginning of the table to be excluded. Examples \u00b6 Setting these configuration options will remove the tables from the the list that will be considered. schemas : schema : excludes : - 'table' - 'regex.*' - '/^table\\d{4}/' The above will filter the tables: Table Filtered table yes regex yes regexsometext yes aregex no table1234 yes table123 no table12345 yes Note Tables defined on the command will override the excludes list sprout seed schema:table Will seed the table file even though it is defined in the excludes list.","title":"Excludes"},{"location":"excludes/#excludes","text":"The configuration option: schemas.<schema>.exclude allows you to specify a list of regular expressions to exclude from any chop, dump or seed command.","title":"Excludes"},{"location":"excludes/#configuration","text":"These are defined in the configuration file . schemas : schema : excludes : - 'table' - 'regex*' - '/custom_regex/' You can specify a simple string, a regex, or a complex regex.","title":"Configuration"},{"location":"excludes/#regular-expressions","text":"The regular expressions are surrounded by: /^<exclude>$/ , so it will match the complete table name if possible. If you do not want this to apply, place a / at the beginning of the table to be excluded.","title":"Regular Expressions"},{"location":"excludes/#examples","text":"Setting these configuration options will remove the tables from the the list that will be considered. schemas : schema : excludes : - 'table' - 'regex.*' - '/^table\\d{4}/' The above will filter the tables: Table Filtered table yes regex yes regexsometext yes aregex no table1234 yes table123 no table12345 yes Note Tables defined on the command will override the excludes list sprout seed schema:table Will seed the table file even though it is defined in the excludes list.","title":"Examples"},{"location":"groups/","text":"Grouping Seed Data \u00b6 Not all seed data is made equal. For example you can have: Static data: stuff that will not change whatever, types, etc Operational data: a minimum subset of data to make the application work Testing data: sample data that you can use to test the application with (accounts, products, etc) Sprout allows you to group your seed data into arbitrary categories. Creating grouped seed data \u00b6 You can dump data from sprout into a grouped collection using the --group=<group> option on all of the commands sprout dump --group = static schema:table1,table2 schema2:table3 ... This will write the data in table1 and table2 from schema and table3 from schema2 into to static group directory. Resulting in the data structure: - /seed - static - schema - table1.sql - table2.sql - schema2 - table3.sql If you do not specify a set of schemas or tables it will dump all the data from all the schemas and tables previously dumped. sprout dump --group = static Dumping to a different group \u00b6 You can then dump your operational or testing data tables using a different group. sprout dump --group = operational schema:table4,table5 This will result in the data structure: - /seed - operational - schema - table4.sql - table5.sql - static - schema - table1.sql - table2.sql - schema2 - table3.sql Seeding individual groups \u00b6 You can then just seed an individual group using the same --groups=<group> option. sprout seed --group = static If you want to only seed a subset of the schemas, or tables you can still specify them in the command line. sprout seed --group = static schema1 sprout seed --group = static schema1:table1 schema2 You can truncate from a group as well \u00b6 Warning If the same schema and table are in multiple groups, it will truncate the entire table sprout chop --group = static","title":"Groups"},{"location":"groups/#grouping-seed-data","text":"Not all seed data is made equal. For example you can have: Static data: stuff that will not change whatever, types, etc Operational data: a minimum subset of data to make the application work Testing data: sample data that you can use to test the application with (accounts, products, etc) Sprout allows you to group your seed data into arbitrary categories.","title":"Grouping Seed Data"},{"location":"groups/#creating-grouped-seed-data","text":"You can dump data from sprout into a grouped collection using the --group=<group> option on all of the commands sprout dump --group = static schema:table1,table2 schema2:table3 ... This will write the data in table1 and table2 from schema and table3 from schema2 into to static group directory. Resulting in the data structure: - /seed - static - schema - table1.sql - table2.sql - schema2 - table3.sql If you do not specify a set of schemas or tables it will dump all the data from all the schemas and tables previously dumped. sprout dump --group = static","title":"Creating grouped seed data"},{"location":"groups/#dumping-to-a-different-group","text":"You can then dump your operational or testing data tables using a different group. sprout dump --group = operational schema:table4,table5 This will result in the data structure: - /seed - operational - schema - table4.sql - table5.sql - static - schema - table1.sql - table2.sql - schema2 - table3.sql","title":"Dumping to a different group"},{"location":"groups/#seeding-individual-groups","text":"You can then just seed an individual group using the same --groups=<group> option. sprout seed --group = static If you want to only seed a subset of the schemas, or tables you can still specify them in the command line. sprout seed --group = static schema1 sprout seed --group = static schema1:table1 schema2","title":"Seeding individual groups"},{"location":"groups/#you-can-truncate-from-a-group-as-well","text":"Warning If the same schema and table are in multiple groups, it will truncate the entire table sprout chop --group = static","title":"You can truncate from a group as well"},{"location":"schemas_tables/","text":"Schemas and Tables \u00b6 All of the commands take a standardised set of schemas and tables that is used to build up what tables the action should be performed on. The definition looks like: [<schema>[:<table>,...]] ... This means that it supports multiple optional schemas. Each schema supports an optional list of one or more tables. Not specifying anything \u00b6 If you do not specify anything for this option. Sprout will look at the current schemas defined in your configuration file. Filter out any schemas that do not have a directory in the current group. Find all the tables for each schema. Schema scanning example \u00b6 Given the directory structure: /seed - core - schema1 - table1 - table2 - schema2 - table3 - extra - schema1 - table4 An empty schema sprout <action> will produce the equivalent of: schema1:table1,table2 schema2:table3 If you specified sprout <action> --group=extra it would produce the equivalent to: schema1:table4 Just specifying the schema \u00b6 You can specify one or more schemas. This will look at all the tables that are defined for only the specified schemas. The schema values specified should be the names of the schemas defined in the configuration file. This does not necessary need to match the name of the actual schema. Given the directory structure: /seed - core - schema1 - table1 - table2 - schema2 - table3 - schema3 - table5 - extra - schema1 - table4 The command: sprout <action> schema1 schema2 Will be the equivalent of: sprout <action> schema1:table1,table2 schema2:table3 Specifying a schema that does not exist locally \u00b6 If you specify a schema (without any tables) that does not exist in the file structure, it will be ignored. sprout <action> --group = extra schema1 schema2 Would be the equivalent to: sprout <action> --group = extra schema1:table4 Schemas with Tables \u00b6 You are able to specify a schema with a collection of tables. This will not look at the filesystem to see if they exist or not, which allows you to dump schemas and tables that do not exist yet. sprout <action> schema1:table1,table2 Any number of schemas and table combinations can be used sprout <action> schema1:table1,table2 schema2:table3 schema3","title":"Schemas and Tables"},{"location":"schemas_tables/#schemas-and-tables","text":"All of the commands take a standardised set of schemas and tables that is used to build up what tables the action should be performed on. The definition looks like: [<schema>[:<table>,...]] ... This means that it supports multiple optional schemas. Each schema supports an optional list of one or more tables.","title":"Schemas and Tables"},{"location":"schemas_tables/#not-specifying-anything","text":"If you do not specify anything for this option. Sprout will look at the current schemas defined in your configuration file. Filter out any schemas that do not have a directory in the current group. Find all the tables for each schema.","title":"Not specifying anything"},{"location":"schemas_tables/#schema-scanning-example","text":"Given the directory structure: /seed - core - schema1 - table1 - table2 - schema2 - table3 - extra - schema1 - table4 An empty schema sprout <action> will produce the equivalent of: schema1:table1,table2 schema2:table3 If you specified sprout <action> --group=extra it would produce the equivalent to: schema1:table4","title":"Schema scanning example"},{"location":"schemas_tables/#just-specifying-the-schema","text":"You can specify one or more schemas. This will look at all the tables that are defined for only the specified schemas. The schema values specified should be the names of the schemas defined in the configuration file. This does not necessary need to match the name of the actual schema. Given the directory structure: /seed - core - schema1 - table1 - table2 - schema2 - table3 - schema3 - table5 - extra - schema1 - table4 The command: sprout <action> schema1 schema2 Will be the equivalent of: sprout <action> schema1:table1,table2 schema2:table3","title":"Just specifying the schema"},{"location":"schemas_tables/#specifying-a-schema-that-does-not-exist-locally","text":"If you specify a schema (without any tables) that does not exist in the file structure, it will be ignored. sprout <action> --group = extra schema1 schema2 Would be the equivalent to: sprout <action> --group = extra schema1:table4","title":"Specifying a schema that does not exist locally"},{"location":"schemas_tables/#schemas-with-tables","text":"You are able to specify a schema with a collection of tables. This will not look at the filesystem to see if they exist or not, which allows you to dump schemas and tables that do not exist yet. sprout <action> schema1:table1,table2 Any number of schemas and table combinations can be used sprout <action> schema1:table1,table2 schema2:table3 schema3","title":"Schemas with Tables"},{"location":"commands/chop/","text":"Truncating Data (Chop) \u00b6 The chop command has the following structure: sprout chop [ --config = <path> ] [ --group = <group> ] [ --all ] [ <schema> [ :<table>,... ]] ... This will truncate the contents of all the specified tables. Note By default when you seed data it will truncate the tables it finds first, so there is no need to do this manually. Configuration file \u00b6 The optional --config option allows you specify the configuration file to use. By default it will look for a file called config/sprout.yml . The location is relative to the working directory. Within docker this is /app . Schema and Table configuration \u00b6 All commands make use of the same Schema and Tables parsing. The [<schema>[:<table>,...]] ... part of the command line allows you to specify none or some schemas, each schema with a set of tables or not. If no schema is defined, all the schemas and tables that are on the filesystem in a group will be truncated. If no tables are defined for a schema, all tables on the filesystem will be truncated. Chopping all the data \u00b6 You can truncate all the tables that have seed data for if you do not specify and schemas or tables. sprout chop This will truncate all the data in the default group. See groups for more information on how the groups work. Truncating all the tables in a schema \u00b6 sprout chop schema1 This will chop (truncate) all the tables that exist on the filesystem in the schema: schema1 . You can truncate multiple schemas too: sprout chop schema1 schema2 Chopping specific tables \u00b6 If you only want to truncate a set of specific tables you can specify them as a comma separated list after the schema they apply to. sprout chop schema1:table1,table2 You can also specify multiple schemas, each with their own set of tables sprout chop schema1:table1,table2 schema2:table3 Chopping all the tables in the database \u00b6 You can truncate all the tables (not just the ones you have seed data for) but using the --add flag. sprout chop --all sprout chop --all schema1 schema2 If you specify schema with tables schema1:table1,table2 , it will only use the tables specified and not any others. Groups \u00b6 The optional --group option allows you to specify which group to read the seed data from. If this is not supplied it will use the default value as defined in the configuration file . See Chopping individual groups for more information on how to truncate data in groups. You can see all of the data in a group by calling: sprout chop --group = testing Or you can limit it to a set of schemas and tables: sprout chop --group = testing schema1 schema2:table1,table2","title":"Chop"},{"location":"commands/chop/#truncating-data-chop","text":"The chop command has the following structure: sprout chop [ --config = <path> ] [ --group = <group> ] [ --all ] [ <schema> [ :<table>,... ]] ... This will truncate the contents of all the specified tables. Note By default when you seed data it will truncate the tables it finds first, so there is no need to do this manually.","title":"Truncating Data (Chop)"},{"location":"commands/chop/#configuration-file","text":"The optional --config option allows you specify the configuration file to use. By default it will look for a file called config/sprout.yml . The location is relative to the working directory. Within docker this is /app .","title":"Configuration file"},{"location":"commands/chop/#schema-and-table-configuration","text":"All commands make use of the same Schema and Tables parsing. The [<schema>[:<table>,...]] ... part of the command line allows you to specify none or some schemas, each schema with a set of tables or not. If no schema is defined, all the schemas and tables that are on the filesystem in a group will be truncated. If no tables are defined for a schema, all tables on the filesystem will be truncated.","title":"Schema and Table configuration"},{"location":"commands/chop/#chopping-all-the-data","text":"You can truncate all the tables that have seed data for if you do not specify and schemas or tables. sprout chop This will truncate all the data in the default group. See groups for more information on how the groups work.","title":"Chopping all the data"},{"location":"commands/chop/#truncating-all-the-tables-in-a-schema","text":"sprout chop schema1 This will chop (truncate) all the tables that exist on the filesystem in the schema: schema1 . You can truncate multiple schemas too: sprout chop schema1 schema2","title":"Truncating all the tables in a schema"},{"location":"commands/chop/#chopping-specific-tables","text":"If you only want to truncate a set of specific tables you can specify them as a comma separated list after the schema they apply to. sprout chop schema1:table1,table2 You can also specify multiple schemas, each with their own set of tables sprout chop schema1:table1,table2 schema2:table3","title":"Chopping specific tables"},{"location":"commands/chop/#chopping-all-the-tables-in-the-database","text":"You can truncate all the tables (not just the ones you have seed data for) but using the --add flag. sprout chop --all sprout chop --all schema1 schema2 If you specify schema with tables schema1:table1,table2 , it will only use the tables specified and not any others.","title":"Chopping all the tables in the database"},{"location":"commands/chop/#groups","text":"The optional --group option allows you to specify which group to read the seed data from. If this is not supplied it will use the default value as defined in the configuration file . See Chopping individual groups for more information on how to truncate data in groups. You can see all of the data in a group by calling: sprout chop --group = testing Or you can limit it to a set of schemas and tables: sprout chop --group = testing schema1 schema2:table1,table2","title":"Groups"},{"location":"commands/dump/","text":"Dumping your data \u00b6 The dump command has the following structure: sprout dump [ --config = <path> ] [ --group = <group> ] [ <schema> [ :<table>,... ]] ... This will dump the contents of a table to a related file in the specified group as a collection of sql insert statements. Output File \u00b6 This is an example of the output from the dump command: INSERT INTO ` country ` ( ` id ` , ` country_code ` , ` country_code_iso2 ` , ` country_code_iso3 ` , ` name ` , ` decimal_point ` , ` thousands_separator ` , ` added ` , ` updated ` , ` deleted ` ) VALUES ( 1 , 'AF' , 'AF' , 'AFG' , 'Afghanistan' , '.' , ',' , '2012-09-20 12:43:09' , '2015-10-07 11:05:58' , NULL ), ( 2 , 'AX' , 'AX' , 'ALA' , 'Aland Islands' , '.' , ',' , '2012-09-20 12:43:09' , '2015-10-07 11:05:58' , NULL ), ( 3 , 'AL' , 'AL' , 'ALB' , 'Albania' , '.' , ',' , '2012-09-20 12:43:09' , '2015-10-07 11:05:58' , NULL ), ( 4 , 'DZ' , 'DZ' , 'DZA' , 'Algeria' , '.' , ',' , '2012-09-20 12:43:09' , '2015-10-07 11:05:58' , NULL ); It puts each row on a separate line to help with storing the data in your code repository and seeing what has changed over time. Configuration file \u00b6 The optional --config option allows you specify the configuration file to use. By default it will look for a file called config/sprout.yml . The location is relative to the working directory. Within docker this is /app . Schema and Table configuration \u00b6 All commands make use of the same Schema and Tables parsing. The [<schema>[:<table>,...]] ... part of the command line allows you to specify none or some schemas, each schema with a set of tables or not. If no schema is defined, all the schemas and tables in a group will be dumped. If no tables are defined for a schema, all tables previously dumped will be used. Dumping all the files from a schema \u00b6 sprout dump schema1 This will over-write all the existing dumps from schema1 for the default group. You can dump multiple schemas: sprout dump schema1 schema2 Dumping specific tables \u00b6 If you only want to dump a set of specific tables (most likely scenario) you can specify them as a comma separated list after the schema they apply to. sprout dump schema1:table1,table2 You can also specify multiple schemas, each with their own set of tables sprout dump schema1:table1,table2 schema2:table3 Groups \u00b6 The optional --group option allows you to specify which group the following dump will belong to. If this is not supplied it will use the default value as defined in the configuration file . See Creating grouped seed data for more information on how to dump data into groups. sprout dump --group = testing schema1 schema2:table1,table2","title":"Dump"},{"location":"commands/dump/#dumping-your-data","text":"The dump command has the following structure: sprout dump [ --config = <path> ] [ --group = <group> ] [ <schema> [ :<table>,... ]] ... This will dump the contents of a table to a related file in the specified group as a collection of sql insert statements.","title":"Dumping your data"},{"location":"commands/dump/#output-file","text":"This is an example of the output from the dump command: INSERT INTO ` country ` ( ` id ` , ` country_code ` , ` country_code_iso2 ` , ` country_code_iso3 ` , ` name ` , ` decimal_point ` , ` thousands_separator ` , ` added ` , ` updated ` , ` deleted ` ) VALUES ( 1 , 'AF' , 'AF' , 'AFG' , 'Afghanistan' , '.' , ',' , '2012-09-20 12:43:09' , '2015-10-07 11:05:58' , NULL ), ( 2 , 'AX' , 'AX' , 'ALA' , 'Aland Islands' , '.' , ',' , '2012-09-20 12:43:09' , '2015-10-07 11:05:58' , NULL ), ( 3 , 'AL' , 'AL' , 'ALB' , 'Albania' , '.' , ',' , '2012-09-20 12:43:09' , '2015-10-07 11:05:58' , NULL ), ( 4 , 'DZ' , 'DZ' , 'DZA' , 'Algeria' , '.' , ',' , '2012-09-20 12:43:09' , '2015-10-07 11:05:58' , NULL ); It puts each row on a separate line to help with storing the data in your code repository and seeing what has changed over time.","title":"Output File"},{"location":"commands/dump/#configuration-file","text":"The optional --config option allows you specify the configuration file to use. By default it will look for a file called config/sprout.yml . The location is relative to the working directory. Within docker this is /app .","title":"Configuration file"},{"location":"commands/dump/#schema-and-table-configuration","text":"All commands make use of the same Schema and Tables parsing. The [<schema>[:<table>,...]] ... part of the command line allows you to specify none or some schemas, each schema with a set of tables or not. If no schema is defined, all the schemas and tables in a group will be dumped. If no tables are defined for a schema, all tables previously dumped will be used.","title":"Schema and Table configuration"},{"location":"commands/dump/#dumping-all-the-files-from-a-schema","text":"sprout dump schema1 This will over-write all the existing dumps from schema1 for the default group. You can dump multiple schemas: sprout dump schema1 schema2","title":"Dumping all the files from a schema"},{"location":"commands/dump/#dumping-specific-tables","text":"If you only want to dump a set of specific tables (most likely scenario) you can specify them as a comma separated list after the schema they apply to. sprout dump schema1:table1,table2 You can also specify multiple schemas, each with their own set of tables sprout dump schema1:table1,table2 schema2:table3","title":"Dumping specific tables"},{"location":"commands/dump/#groups","text":"The optional --group option allows you to specify which group the following dump will belong to. If this is not supplied it will use the default value as defined in the configuration file . See Creating grouped seed data for more information on how to dump data into groups. sprout dump --group = testing schema1 schema2:table1,table2","title":"Groups"},{"location":"commands/seed/","text":"Seeding Data \u00b6 The seed command has the following structure: sprout seed [ --config = <path> ] [ --no-chop ] [ --chop-all ] [ --group = <group> ] [ <schema> [ :<table>,... ]] ... This will dump the contents of a table to a related file in the specified group as a collection of sql insert statements. Note Currently only .sql files are supported when seeding data. Configuration file \u00b6 The optional --config option allows you specify the configuration file to use. By default it will look for a file called config/sprout.yml . The location is relative to the working directory. Within docker this is /app . Prevent truncation \u00b6 By default the seed command will truncate all the relevant tables. To prevent this you can specify the --no-chop option. Truncate all the tables \u00b6 To truncate all the tables in the schema instead of just the tables you want to seed, you can use the option --chop-all . This is the equivalent to the --all option on the chop command. Schema and Table configuration \u00b6 All commands make use of the same Schema and Tables parsing. The [<schema>[:<table>,...]] ... part of the command line allows you to specify none or some schemas, each schema with a set of tables or not. If no schema is defined, all the schemas and tables in a group will be seeded. If no tables are defined for a schema, all tables on the filesystem will be seeded. Seeding all the data \u00b6 You can seed all the current data if you do not specify and schemas or tables. sprout seed This will seed all the data in the default group. See groups for more information on how the groups work. Seeding all the files in a schema \u00b6 sprout seed schema1 This will chop (truncate) and seed all the tables that exist on the filesystem in the schema: schema1 . You can truncate all the tables in the schema, not just the ones you wish to seed. sprout seed --chop-all schema1 If you do not wish to truncate the tables first, you can use: sprout seed --no-chop schema1 You can seed multiple schemas too: sprout seed schema1 schema2 Seeding specific tables \u00b6 If you only want to seed a set of specific tables you can specify them as a comma separated list after the schema they apply to. sprout seed schema1:table1,table2 You can also specify multiple schemas, each with their own set of tables sprout seed schema1:table1,table2 schema2:table3 Groups \u00b6 The optional --group option allows you to specify which group to read the seed data from. If this is not supplied it will use the default value as defined in the configuration file . See Seeding individual groups for more information on how to seed data in groups. You can see all of the data in a group by calling: sprout seed --group = testing Or you can limit it to a set of schemas and tables: sprout seed --group = testing schema1 schema2:table1,table2","title":"Seed"},{"location":"commands/seed/#seeding-data","text":"The seed command has the following structure: sprout seed [ --config = <path> ] [ --no-chop ] [ --chop-all ] [ --group = <group> ] [ <schema> [ :<table>,... ]] ... This will dump the contents of a table to a related file in the specified group as a collection of sql insert statements. Note Currently only .sql files are supported when seeding data.","title":"Seeding Data"},{"location":"commands/seed/#configuration-file","text":"The optional --config option allows you specify the configuration file to use. By default it will look for a file called config/sprout.yml . The location is relative to the working directory. Within docker this is /app .","title":"Configuration file"},{"location":"commands/seed/#prevent-truncation","text":"By default the seed command will truncate all the relevant tables. To prevent this you can specify the --no-chop option.","title":"Prevent truncation"},{"location":"commands/seed/#truncate-all-the-tables","text":"To truncate all the tables in the schema instead of just the tables you want to seed, you can use the option --chop-all . This is the equivalent to the --all option on the chop command.","title":"Truncate all the tables"},{"location":"commands/seed/#schema-and-table-configuration","text":"All commands make use of the same Schema and Tables parsing. The [<schema>[:<table>,...]] ... part of the command line allows you to specify none or some schemas, each schema with a set of tables or not. If no schema is defined, all the schemas and tables in a group will be seeded. If no tables are defined for a schema, all tables on the filesystem will be seeded.","title":"Schema and Table configuration"},{"location":"commands/seed/#seeding-all-the-data","text":"You can seed all the current data if you do not specify and schemas or tables. sprout seed This will seed all the data in the default group. See groups for more information on how the groups work.","title":"Seeding all the data"},{"location":"commands/seed/#seeding-all-the-files-in-a-schema","text":"sprout seed schema1 This will chop (truncate) and seed all the tables that exist on the filesystem in the schema: schema1 . You can truncate all the tables in the schema, not just the ones you wish to seed. sprout seed --chop-all schema1 If you do not wish to truncate the tables first, you can use: sprout seed --no-chop schema1 You can seed multiple schemas too: sprout seed schema1 schema2","title":"Seeding all the files in a schema"},{"location":"commands/seed/#seeding-specific-tables","text":"If you only want to seed a set of specific tables you can specify them as a comma separated list after the schema they apply to. sprout seed schema1:table1,table2 You can also specify multiple schemas, each with their own set of tables sprout seed schema1:table1,table2 schema2:table3","title":"Seeding specific tables"},{"location":"commands/seed/#groups","text":"The optional --group option allows you to specify which group to read the seed data from. If this is not supplied it will use the default value as defined in the configuration file . See Seeding individual groups for more information on how to seed data in groups. You can see all of the data in a group by calling: sprout seed --group = testing Or you can limit it to a set of schemas and tables: sprout seed --group = testing schema1 schema2:table1,table2","title":"Groups"},{"location":"setup/composer/","text":"Running sprout with docker \u00b6 Sprout can be run locally in PHP by including it from composer. Add it to your project using: composer require graze/sprout You can now run it using: ./vendor/bin/sprout [ command ] Versions \u00b6 You can specify which version you require through composer: composer require graze/sprout:^0.1 or in the composer.json file: { \"require\" : { \"graze/sprout\" : \"^0.1\" } }","title":"Composer"},{"location":"setup/composer/#running-sprout-with-docker","text":"Sprout can be run locally in PHP by including it from composer. Add it to your project using: composer require graze/sprout You can now run it using: ./vendor/bin/sprout [ command ]","title":"Running sprout with docker"},{"location":"setup/composer/#versions","text":"You can specify which version you require through composer: composer require graze/sprout:^0.1 or in the composer.json file: { \"require\" : { \"graze/sprout\" : \"^0.1\" } }","title":"Versions"},{"location":"setup/configuration/","text":"Sprout Configuration File \u00b6 The configuration file follows the following standards. By default sprout looks for a config/sprout.yml file, you can specify a different file using --config=path/to/file.yml . This file is relative to the current working directory. Complete Configuration File Example \u00b6 # [optional] default properties to use defaults : # [optional, string, default: `core`] The default group to use if `--group` is not specified group : core # [optional, string, default: `/seed`] The root path of all the seed data path : /seed # [optional, int, default: `10`] Maximum number of simultaneous processes to run at a time simultaneousProcesses : 10 # [optional] The groups root collection allows you to specify custom paths for an individual group groups : # The name of the group (used when specifying `--group=<group>` core : # [optional, string] A custom path to the group if it does not follow the `/root/group/` hierarchy. This is absolute # or relative to the working directory path : /custom/path/to/group # [required, min: 1] Schemas specify each schema you wish to seed in the database and their connection information schemas : # name of the schema to reference. There must be at least 1 schema in the configuration file schema1 : # [optional, string] the actual name of the schema in the database. If not specified, the schema name from # above will be used schema : 'schema' # [optional, string] A custom directory name for this schema, only required if it is different from the `schema` value dirName : directory # [optional, array[string]] A list of tables (as regular expressions) to exclude from actions exclude : - 'table1' - 'table2' - 'migrations' - 'table[456]' - '/^table_\\d{4}/' # [required] Connection details connection : &default_connection # [required, string] Username of the database connection user : 'morphism' # [required, string] Password of the database connection password : 'morphism' # [required] driver for the database connection, currently only: `mysql` is supported driver : 'mysql' # [required, string] database on a remote host host : 'db' # [optional, string] name of the database. If not specified `<schema>` will be used dbName : 'schema' # [optional, int, default: `3306`] The port to connect on port : 3306 # A second schema, schema2 : connection : # you can use yaml anchors to reduce duplicate data << : *default_connection Minimal Configuration File \u00b6 This is a minimal configuration file with a single schema and connection schemas : first_schema : connection : host : db driver : mysql user : root password : rootpassword Excludes \u00b6 See the excludes page for more information of the effect of exclusion.","title":"Configuration File"},{"location":"setup/configuration/#sprout-configuration-file","text":"The configuration file follows the following standards. By default sprout looks for a config/sprout.yml file, you can specify a different file using --config=path/to/file.yml . This file is relative to the current working directory.","title":"Sprout Configuration File"},{"location":"setup/configuration/#complete-configuration-file-example","text":"# [optional] default properties to use defaults : # [optional, string, default: `core`] The default group to use if `--group` is not specified group : core # [optional, string, default: `/seed`] The root path of all the seed data path : /seed # [optional, int, default: `10`] Maximum number of simultaneous processes to run at a time simultaneousProcesses : 10 # [optional] The groups root collection allows you to specify custom paths for an individual group groups : # The name of the group (used when specifying `--group=<group>` core : # [optional, string] A custom path to the group if it does not follow the `/root/group/` hierarchy. This is absolute # or relative to the working directory path : /custom/path/to/group # [required, min: 1] Schemas specify each schema you wish to seed in the database and their connection information schemas : # name of the schema to reference. There must be at least 1 schema in the configuration file schema1 : # [optional, string] the actual name of the schema in the database. If not specified, the schema name from # above will be used schema : 'schema' # [optional, string] A custom directory name for this schema, only required if it is different from the `schema` value dirName : directory # [optional, array[string]] A list of tables (as regular expressions) to exclude from actions exclude : - 'table1' - 'table2' - 'migrations' - 'table[456]' - '/^table_\\d{4}/' # [required] Connection details connection : &default_connection # [required, string] Username of the database connection user : 'morphism' # [required, string] Password of the database connection password : 'morphism' # [required] driver for the database connection, currently only: `mysql` is supported driver : 'mysql' # [required, string] database on a remote host host : 'db' # [optional, string] name of the database. If not specified `<schema>` will be used dbName : 'schema' # [optional, int, default: `3306`] The port to connect on port : 3306 # A second schema, schema2 : connection : # you can use yaml anchors to reduce duplicate data << : *default_connection","title":"Complete Configuration File Example"},{"location":"setup/configuration/#minimal-configuration-file","text":"This is a minimal configuration file with a single schema and connection schemas : first_schema : connection : host : db driver : mysql user : root password : rootpassword","title":"Minimal Configuration File"},{"location":"setup/configuration/#excludes","text":"See the excludes page for more information of the effect of exclusion.","title":"Excludes"},{"location":"setup/docker/","text":"Running sprout with docker \u00b6 There is a docker image: graze/sprout on DockerHub that can be used to run sprout. When specifying paths in the configuration file, remember they are relative to the sprout working directory (default: /app ). You will need to mount your configuration and seed data: Command Line \u00b6 This will run sprout with seed data in the default /seed path. docker run --rm -v $( pwd ) /config/sprout:/app/config -v $( pwd ) /seed:/seed graze/sprout [ command ] Docker Compose \u00b6 An example docker-compose.yml file. version : '2' services : sprout : image : graze/sprout depends_on : - db volumes : - ./config/sprout:/app/config:cached - ./seed:/seed:delegated db : image : mysql:5 environment : MYSQL_USER : dev MYSQL_PASSWORD : password MYSQL_DATABASE : the_schema MYSQL_ROOT_PASSWORD : rootpassword With this file you can run sprout using the commands: docker-compose run --rm sprout [ command ] Versions \u00b6 Different versions can be used by defining tags on the image: services : sprout : image : graze/sprout:0.1 docker run --rm -v $( pwd ) /config/sprout:/app/config -v $( pwd ) /seed:/seed graze/sprout:0.1 [ command ]","title":"Docker"},{"location":"setup/docker/#running-sprout-with-docker","text":"There is a docker image: graze/sprout on DockerHub that can be used to run sprout. When specifying paths in the configuration file, remember they are relative to the sprout working directory (default: /app ). You will need to mount your configuration and seed data:","title":"Running sprout with docker"},{"location":"setup/docker/#command-line","text":"This will run sprout with seed data in the default /seed path. docker run --rm -v $( pwd ) /config/sprout:/app/config -v $( pwd ) /seed:/seed graze/sprout [ command ]","title":"Command Line"},{"location":"setup/docker/#docker-compose","text":"An example docker-compose.yml file. version : '2' services : sprout : image : graze/sprout depends_on : - db volumes : - ./config/sprout:/app/config:cached - ./seed:/seed:delegated db : image : mysql:5 environment : MYSQL_USER : dev MYSQL_PASSWORD : password MYSQL_DATABASE : the_schema MYSQL_ROOT_PASSWORD : rootpassword With this file you can run sprout using the commands: docker-compose run --rm sprout [ command ]","title":"Docker Compose"},{"location":"setup/docker/#versions","text":"Different versions can be used by defining tags on the image: services : sprout : image : graze/sprout:0.1 docker run --rm -v $( pwd ) /config/sprout:/app/config -v $( pwd ) /seed:/seed graze/sprout:0.1 [ command ]","title":"Versions"}]}